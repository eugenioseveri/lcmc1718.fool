let

  class List (f:int, r:List) {
    fun first:int() f;
    fun rest:List() r; 
  }
  
  fun printList:List (l:List) 
      let  
        fun makeList:List (l:List, i:int) new List (i,l);
      in 
         if (l == null) 
           then {null}
           else {makeList(printList(l.rest()),print(l.first()))};                 
  
  fun append:List (l1:List, l2:List)
      if (l1 == null)
        then {l2}
        else {new List(l1.first(), append(l1.rest(),l2))} ;  
    
  fun filter:List (l:List, accept:(int)->bool) 
      if (l == null) 
        then {null}
        else {if ( accept(l.first()) )
                then { new List( l.first(), filter(l.rest(),accept) ) }
                else { filter(l.rest(),accept) }
             };
         
  fun quicksort:List (l:List, rel:(int,int)->bool)    
      let
        var pivot:int = if (l==null) then {0} else {l.first()};       
        fun beforePivot:bool (x:int) rel(x,pivot);
        fun afterPivot:bool (x:int) !(rel(x,pivot));
      in        
         if (l == null) 
           then {null}
           else {append( 
                   quicksort( filter(l.rest(),beforePivot), rel ),                  
                   new List(  pivot,  quicksort( filter(l.rest(),afterPivot), rel )  )                       
                 )};
                                   
  fun inc:bool (x:int,y:int) x<=y;
  fun dec:bool (x:int,y:int) x>=y;
               
  var l:List = new List (2, 
                    new List(1,
                        new List(4,
                            new List (3, 
                                new List(2,
                                    new List(5,null))))));
  
in printList(quicksort(l,dec));

